name: Deploy to ECS for DEV

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "${{ secrets.AWS_REGION }}"
      AWS_ACCOUNT_ID: "${{ secrets.AWS_ACCOUNT_ID }}"
      DEPLOYMENT_ENV_ACTIONS: "Develop"

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ env.AWS_REGION }}

    - name: Build, tag, and push backend image to ECR
      id: build-backend
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_BACKEND }}
      run: |
        docker build -t $ECR_REPOSITORY:latest -f backend/Dockerfile backend/
        docker tag $ECR_REPOSITORY:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
        docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
        echo "::set-output name=image::${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest"

    - name: Build, tag, and push frontend image to ECR
      id: build-frontend
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_FRONTEND }}
      run: |
        docker build -t $ECR_REPOSITORY:latest -f frontend/Dockerfile frontend/
        docker tag $ECR_REPOSITORY:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
        docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest
        echo "::set-output name=image::${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:latest"

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION_NAME }} \
        --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition for backend
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: backend
        image: ${{ steps.build-backend.outputs.image }}

    - name: Fill in the new image ID in the Amazon ECS task definition for frontend
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        container-name: frontend
        image: ${{ steps.build-frontend.outputs.image }}

    - name: Update DEPLOYMENT_ENV variable in task definition
      run: |
        jq --arg DEPLOYMENT_ENV "${{ env.DEPLOYMENT_ENV_ACTIONS }}" '
        .containerDefinitions[0].environment |= map(if .name == "DEPLOYMENT_ENV" then .value = $DEPLOYMENT_ENV else . end)' task-definition.json > new-task-def.json

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: new-task-def.json
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Wait for ECS service to be stable
      run: |
        echo "Waiting for ECS service to be stable..."
        aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }}

    - name: Get public IP or DNS of the task
      run: |
        echo "Getting public IP or DNS of the task..."
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ secrets.ECS_CLUSTER }} --service-name ${{ secrets.ECS_SERVICE }} --query "taskArns[0]" --output text)
        ENI_ID=$(aws ecs describe-tasks --cluster ${{ secrets.ECS_CLUSTER }} --tasks $TASK_ARN --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query "NetworkInterfaces[0].Association.PublicIp" --output text)
        PUBLIC_DNS=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query "NetworkInterfaces[0].Association.PublicDnsName" --output text)

        echo "The public IP of the ECS task is: $PUBLIC_IP"
        echo "The public DNS of the ECS task is: $PUBLIC_DNS"

        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "PUBLIC_DNS=$PUBLIC_DNS" >> $GITHUB_ENV

    - name: Output public IP and DNS
      run: |
        echo "Public IP: ${{ env.PUBLIC_IP }}"
        echo "Public DNS: ${{ env.PUBLIC_DNS }}"
